// Code generated by MockGen. DO NOT EDIT.
// Source: common/encoding/encoding.go

// Package mock_encoding is a generated GoMock package.
package mock_encoding

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	encoding "github.com/ravielze/oculi/common/encoding"
)

// MockBasicEncoding is a mock of BasicEncoding interface.
type MockBasicEncoding struct {
	ctrl     *gomock.Controller
	recorder *MockBasicEncodingMockRecorder
}

// MockBasicEncodingMockRecorder is the mock recorder for MockBasicEncoding.
type MockBasicEncodingMockRecorder struct {
	mock *MockBasicEncoding
}

// NewMockBasicEncoding creates a new mock instance.
func NewMockBasicEncoding(ctrl *gomock.Controller) *MockBasicEncoding {
	mock := &MockBasicEncoding{ctrl: ctrl}
	mock.recorder = &MockBasicEncodingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicEncoding) EXPECT() *MockBasicEncodingMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockBasicEncoding) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockBasicEncodingMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockBasicEncoding)(nil).Bytes))
}

// FromBytes mocks base method.
func (m *MockBasicEncoding) FromBytes(value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FromBytes", value)
}

// FromBytes indicates an expected call of FromBytes.
func (mr *MockBasicEncodingMockRecorder) FromBytes(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromBytes", reflect.TypeOf((*MockBasicEncoding)(nil).FromBytes), value)
}

// FromInt mocks base method.
func (m *MockBasicEncoding) FromInt(value int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FromInt", value)
}

// FromInt indicates an expected call of FromInt.
func (mr *MockBasicEncodingMockRecorder) FromInt(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromInt", reflect.TypeOf((*MockBasicEncoding)(nil).FromInt), value)
}

// FromUUID mocks base method.
func (m *MockBasicEncoding) FromUUID(value uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FromUUID", value)
}

// FromUUID indicates an expected call of FromUUID.
func (mr *MockBasicEncodingMockRecorder) FromUUID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromUUID", reflect.TypeOf((*MockBasicEncoding)(nil).FromUUID), value)
}

// FromUUIDString mocks base method.
func (m *MockBasicEncoding) FromUUIDString(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromUUIDString", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// FromUUIDString indicates an expected call of FromUUIDString.
func (mr *MockBasicEncodingMockRecorder) FromUUIDString(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromUUIDString", reflect.TypeOf((*MockBasicEncoding)(nil).FromUUIDString), value)
}

// Randomize mocks base method.
func (m *MockBasicEncoding) Randomize() encoding.UUIDEncodeDecode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Randomize")
	ret0, _ := ret[0].(encoding.UUIDEncodeDecode)
	return ret0
}

// Randomize indicates an expected call of Randomize.
func (mr *MockBasicEncodingMockRecorder) Randomize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Randomize", reflect.TypeOf((*MockBasicEncoding)(nil).Randomize))
}

// String mocks base method.
func (m *MockBasicEncoding) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockBasicEncodingMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockBasicEncoding)(nil).String))
}

// ToBytes mocks base method.
func (m *MockBasicEncoding) ToBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ToBytes indicates an expected call of ToBytes.
func (mr *MockBasicEncodingMockRecorder) ToBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToBytes", reflect.TypeOf((*MockBasicEncoding)(nil).ToBytes))
}

// ToInt mocks base method.
func (m *MockBasicEncoding) ToInt() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToInt")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ToInt indicates an expected call of ToInt.
func (mr *MockBasicEncodingMockRecorder) ToInt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToInt", reflect.TypeOf((*MockBasicEncoding)(nil).ToInt))
}

// ToUUID mocks base method.
func (m *MockBasicEncoding) ToUUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// ToUUID indicates an expected call of ToUUID.
func (mr *MockBasicEncodingMockRecorder) ToUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUUID", reflect.TypeOf((*MockBasicEncoding)(nil).ToUUID))
}

// MockIntEncodeDecode is a mock of IntEncodeDecode interface.
type MockIntEncodeDecode struct {
	ctrl     *gomock.Controller
	recorder *MockIntEncodeDecodeMockRecorder
}

// MockIntEncodeDecodeMockRecorder is the mock recorder for MockIntEncodeDecode.
type MockIntEncodeDecodeMockRecorder struct {
	mock *MockIntEncodeDecode
}

// NewMockIntEncodeDecode creates a new mock instance.
func NewMockIntEncodeDecode(ctrl *gomock.Controller) *MockIntEncodeDecode {
	mock := &MockIntEncodeDecode{ctrl: ctrl}
	mock.recorder = &MockIntEncodeDecodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntEncodeDecode) EXPECT() *MockIntEncodeDecodeMockRecorder {
	return m.recorder
}

// FromInt mocks base method.
func (m *MockIntEncodeDecode) FromInt(value int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FromInt", value)
}

// FromInt indicates an expected call of FromInt.
func (mr *MockIntEncodeDecodeMockRecorder) FromInt(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromInt", reflect.TypeOf((*MockIntEncodeDecode)(nil).FromInt), value)
}

// ToInt mocks base method.
func (m *MockIntEncodeDecode) ToInt() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToInt")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ToInt indicates an expected call of ToInt.
func (mr *MockIntEncodeDecodeMockRecorder) ToInt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToInt", reflect.TypeOf((*MockIntEncodeDecode)(nil).ToInt))
}

// MockBytesEncodeDecode is a mock of BytesEncodeDecode interface.
type MockBytesEncodeDecode struct {
	ctrl     *gomock.Controller
	recorder *MockBytesEncodeDecodeMockRecorder
}

// MockBytesEncodeDecodeMockRecorder is the mock recorder for MockBytesEncodeDecode.
type MockBytesEncodeDecodeMockRecorder struct {
	mock *MockBytesEncodeDecode
}

// NewMockBytesEncodeDecode creates a new mock instance.
func NewMockBytesEncodeDecode(ctrl *gomock.Controller) *MockBytesEncodeDecode {
	mock := &MockBytesEncodeDecode{ctrl: ctrl}
	mock.recorder = &MockBytesEncodeDecodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBytesEncodeDecode) EXPECT() *MockBytesEncodeDecodeMockRecorder {
	return m.recorder
}

// FromBytes mocks base method.
func (m *MockBytesEncodeDecode) FromBytes(value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FromBytes", value)
}

// FromBytes indicates an expected call of FromBytes.
func (mr *MockBytesEncodeDecodeMockRecorder) FromBytes(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromBytes", reflect.TypeOf((*MockBytesEncodeDecode)(nil).FromBytes), value)
}

// ToBytes mocks base method.
func (m *MockBytesEncodeDecode) ToBytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToBytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ToBytes indicates an expected call of ToBytes.
func (mr *MockBytesEncodeDecodeMockRecorder) ToBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToBytes", reflect.TypeOf((*MockBytesEncodeDecode)(nil).ToBytes))
}

// MockUUIDEncodeDecode is a mock of UUIDEncodeDecode interface.
type MockUUIDEncodeDecode struct {
	ctrl     *gomock.Controller
	recorder *MockUUIDEncodeDecodeMockRecorder
}

// MockUUIDEncodeDecodeMockRecorder is the mock recorder for MockUUIDEncodeDecode.
type MockUUIDEncodeDecodeMockRecorder struct {
	mock *MockUUIDEncodeDecode
}

// NewMockUUIDEncodeDecode creates a new mock instance.
func NewMockUUIDEncodeDecode(ctrl *gomock.Controller) *MockUUIDEncodeDecode {
	mock := &MockUUIDEncodeDecode{ctrl: ctrl}
	mock.recorder = &MockUUIDEncodeDecodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUUIDEncodeDecode) EXPECT() *MockUUIDEncodeDecodeMockRecorder {
	return m.recorder
}

// FromUUID mocks base method.
func (m *MockUUIDEncodeDecode) FromUUID(value uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FromUUID", value)
}

// FromUUID indicates an expected call of FromUUID.
func (mr *MockUUIDEncodeDecodeMockRecorder) FromUUID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromUUID", reflect.TypeOf((*MockUUIDEncodeDecode)(nil).FromUUID), value)
}

// FromUUIDString mocks base method.
func (m *MockUUIDEncodeDecode) FromUUIDString(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromUUIDString", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// FromUUIDString indicates an expected call of FromUUIDString.
func (mr *MockUUIDEncodeDecodeMockRecorder) FromUUIDString(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromUUIDString", reflect.TypeOf((*MockUUIDEncodeDecode)(nil).FromUUIDString), value)
}

// Randomize mocks base method.
func (m *MockUUIDEncodeDecode) Randomize() encoding.UUIDEncodeDecode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Randomize")
	ret0, _ := ret[0].(encoding.UUIDEncodeDecode)
	return ret0
}

// Randomize indicates an expected call of Randomize.
func (mr *MockUUIDEncodeDecodeMockRecorder) Randomize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Randomize", reflect.TypeOf((*MockUUIDEncodeDecode)(nil).Randomize))
}

// ToUUID mocks base method.
func (m *MockUUIDEncodeDecode) ToUUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// ToUUID indicates an expected call of ToUUID.
func (mr *MockUUIDEncodeDecodeMockRecorder) ToUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUUID", reflect.TypeOf((*MockUUIDEncodeDecode)(nil).ToUUID))
}
