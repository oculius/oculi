// Code generated by MockGen. DO NOT EDIT.
// Source: common/enum/enum.go

// Package mock_enum is a generated GoMock package.
package mock_enum

import (
	driver "database/sql/driver"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEnum is a mock of IEnum interface.
type MockIEnum struct {
	ctrl     *gomock.Controller
	recorder *MockIEnumMockRecorder
}

// MockIEnumMockRecorder is the mock recorder for MockIEnum.
type MockIEnumMockRecorder struct {
	mock *MockIEnum
}

// NewMockIEnum creates a new mock instance.
func NewMockIEnum(ctrl *gomock.Controller) *MockIEnum {
	mock := &MockIEnum{ctrl: ctrl}
	mock.recorder = &MockIEnumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEnum) EXPECT() *MockIEnumMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockIEnum) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockIEnumMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockIEnum)(nil).Code))
}

// Name mocks base method.
func (m *MockIEnum) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIEnumMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIEnum)(nil).Name))
}

// MockEnumRegisterable is a mock of EnumRegisterable interface.
type MockEnumRegisterable struct {
	ctrl     *gomock.Controller
	recorder *MockEnumRegisterableMockRecorder
}

// MockEnumRegisterableMockRecorder is the mock recorder for MockEnumRegisterable.
type MockEnumRegisterableMockRecorder struct {
	mock *MockEnumRegisterable
}

// NewMockEnumRegisterable creates a new mock instance.
func NewMockEnumRegisterable(ctrl *gomock.Controller) *MockEnumRegisterable {
	mock := &MockEnumRegisterable{ctrl: ctrl}
	mock.recorder = &MockEnumRegisterableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnumRegisterable) EXPECT() *MockEnumRegisterableMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockEnumRegisterable) Code() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(string)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockEnumRegisterableMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockEnumRegisterable)(nil).Code))
}

// MarshalJSON mocks base method.
func (m *MockEnumRegisterable) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockEnumRegisterableMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockEnumRegisterable)(nil).MarshalJSON))
}

// Name mocks base method.
func (m *MockEnumRegisterable) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEnumRegisterableMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEnumRegisterable)(nil).Name))
}

// Value mocks base method.
func (m *MockEnumRegisterable) Value() (driver.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(driver.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockEnumRegisterableMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockEnumRegisterable)(nil).Value))
}

// MockEnumRegisterablePtr is a mock of EnumRegisterablePtr interface.
type MockEnumRegisterablePtr struct {
	ctrl     *gomock.Controller
	recorder *MockEnumRegisterablePtrMockRecorder
}

// MockEnumRegisterablePtrMockRecorder is the mock recorder for MockEnumRegisterablePtr.
type MockEnumRegisterablePtrMockRecorder struct {
	mock *MockEnumRegisterablePtr
}

// NewMockEnumRegisterablePtr creates a new mock instance.
func NewMockEnumRegisterablePtr(ctrl *gomock.Controller) *MockEnumRegisterablePtr {
	mock := &MockEnumRegisterablePtr{ctrl: ctrl}
	mock.recorder = &MockEnumRegisterablePtrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnumRegisterablePtr) EXPECT() *MockEnumRegisterablePtrMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockEnumRegisterablePtr) Scan(val interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockEnumRegisterablePtrMockRecorder) Scan(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockEnumRegisterablePtr)(nil).Scan), val)
}

// UnmarshalJSON mocks base method.
func (m *MockEnumRegisterablePtr) UnmarshalJSON(val []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalJSON", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON.
func (mr *MockEnumRegisterablePtrMockRecorder) UnmarshalJSON(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockEnumRegisterablePtr)(nil).UnmarshalJSON), val)
}
