// Code generated by MockGen. DO NOT EDIT.
// Source: logs/info.go

// Package mock_logs is a generated GoMock package.
package mock_logs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logs "github.com/ravielze/oculi/logs"
)

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockInfo) Data() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockInfoMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockInfo)(nil).Data))
}

// Message mocks base method.
func (m *MockInfo) Message() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(string)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockInfoMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockInfo)(nil).Message))
}

// MockApplicableInfo is a mock of ApplicableInfo interface.
type MockApplicableInfo struct {
	ctrl     *gomock.Controller
	recorder *MockApplicableInfoMockRecorder
}

// MockApplicableInfoMockRecorder is the mock recorder for MockApplicableInfo.
type MockApplicableInfoMockRecorder struct {
	mock *MockApplicableInfo
}

// NewMockApplicableInfo creates a new mock instance.
func NewMockApplicableInfo(ctrl *gomock.Controller) *MockApplicableInfo {
	mock := &MockApplicableInfo{ctrl: ctrl}
	mock.recorder = &MockApplicableInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicableInfo) EXPECT() *MockApplicableInfoMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockApplicableInfo) Apply(si *logs.Subinfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", si)
}

// Apply indicates an expected call of Apply.
func (mr *MockApplicableInfoMockRecorder) Apply(si interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockApplicableInfo)(nil).Apply), si)
}
