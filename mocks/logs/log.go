// Code generated by MockGen. DO NOT EDIT.
// Source: logs/log.go

// Package mock_logs is a generated GoMock package.
package mock_logs

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	log "github.com/labstack/gommon/log"
	logs "github.com/ravielze/oculi/logs"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), i...)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Debugj mocks base method.
func (m *MockLogger) Debugj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debugj", j)
}

// Debugj indicates an expected call of Debugj.
func (mr *MockLoggerMockRecorder) Debugj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugj", reflect.TypeOf((*MockLogger)(nil).Debugj), j)
}

// Error mocks base method.
func (m *MockLogger) Error(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), i...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Errorj mocks base method.
func (m *MockLogger) Errorj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Errorj", j)
}

// Errorj indicates an expected call of Errorj.
func (mr *MockLoggerMockRecorder) Errorj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorj", reflect.TypeOf((*MockLogger)(nil).Errorj), j)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), i...)
}

// Fatalf mocks base method.
func (m *MockLogger) Fatalf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerMockRecorder) Fatalf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// Fatalj mocks base method.
func (m *MockLogger) Fatalj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatalj", j)
}

// Fatalj indicates an expected call of Fatalj.
func (mr *MockLoggerMockRecorder) Fatalj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalj", reflect.TypeOf((*MockLogger)(nil).Fatalj), j)
}

// Info mocks base method.
func (m *MockLogger) Info(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), i...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Infoj mocks base method.
func (m *MockLogger) Infoj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Infoj", j)
}

// Infoj indicates an expected call of Infoj.
func (mr *MockLoggerMockRecorder) Infoj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infoj", reflect.TypeOf((*MockLogger)(nil).Infoj), j)
}

// Instance mocks base method.
func (m *MockLogger) Instance() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Instance indicates an expected call of Instance.
func (mr *MockLoggerMockRecorder) Instance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockLogger)(nil).Instance))
}

// Level mocks base method.
func (m *MockLogger) Level() log.Lvl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(log.Lvl)
	return ret0
}

// Level indicates an expected call of Level.
func (mr *MockLoggerMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockLogger)(nil).Level))
}

// Output mocks base method.
func (m *MockLogger) Output() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockLoggerMockRecorder) Output() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockLogger)(nil).Output))
}

// Panic mocks base method.
func (m *MockLogger) Panic(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), i...)
}

// Panicf mocks base method.
func (m *MockLogger) Panicf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf.
func (mr *MockLoggerMockRecorder) Panicf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockLogger)(nil).Panicf), varargs...)
}

// Panicj mocks base method.
func (m *MockLogger) Panicj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panicj", j)
}

// Panicj indicates an expected call of Panicj.
func (mr *MockLoggerMockRecorder) Panicj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicj", reflect.TypeOf((*MockLogger)(nil).Panicj), j)
}

// Prefix mocks base method.
func (m *MockLogger) Prefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockLoggerMockRecorder) Prefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockLogger)(nil).Prefix))
}

// Print mocks base method.
func (m *MockLogger) Print(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print.
func (mr *MockLoggerMockRecorder) Print(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockLogger)(nil).Print), i...)
}

// Printf mocks base method.
func (m *MockLogger) Printf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLoggerMockRecorder) Printf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}

// Printj mocks base method.
func (m *MockLogger) Printj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Printj", j)
}

// Printj indicates an expected call of Printj.
func (mr *MockLoggerMockRecorder) Printj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printj", reflect.TypeOf((*MockLogger)(nil).Printj), j)
}

// SetHeader mocks base method.
func (m *MockLogger) SetHeader(h string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", h)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLoggerMockRecorder) SetHeader(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLogger)(nil).SetHeader), h)
}

// SetLevel mocks base method.
func (m *MockLogger) SetLevel(v log.Lvl) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", v)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLoggerMockRecorder) SetLevel(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLogger)(nil).SetLevel), v)
}

// SetOutput mocks base method.
func (m *MockLogger) SetOutput(w io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutput", w)
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockLoggerMockRecorder) SetOutput(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockLogger)(nil).SetOutput), w)
}

// SetPrefix mocks base method.
func (m *MockLogger) SetPrefix(p string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefix", p)
}

// SetPrefix indicates an expected call of SetPrefix.
func (mr *MockLoggerMockRecorder) SetPrefix(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockLogger)(nil).SetPrefix), p)
}

// StandardDebug mocks base method.
func (m *MockLogger) StandardDebug(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardDebug", info)
}

// StandardDebug indicates an expected call of StandardDebug.
func (mr *MockLoggerMockRecorder) StandardDebug(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardDebug", reflect.TypeOf((*MockLogger)(nil).StandardDebug), info)
}

// StandardError mocks base method.
func (m *MockLogger) StandardError(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardError", info)
}

// StandardError indicates an expected call of StandardError.
func (mr *MockLoggerMockRecorder) StandardError(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardError", reflect.TypeOf((*MockLogger)(nil).StandardError), info)
}

// StandardFatal mocks base method.
func (m *MockLogger) StandardFatal(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardFatal", info)
}

// StandardFatal indicates an expected call of StandardFatal.
func (mr *MockLoggerMockRecorder) StandardFatal(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardFatal", reflect.TypeOf((*MockLogger)(nil).StandardFatal), info)
}

// StandardInfo mocks base method.
func (m *MockLogger) StandardInfo(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardInfo", info)
}

// StandardInfo indicates an expected call of StandardInfo.
func (mr *MockLoggerMockRecorder) StandardInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardInfo", reflect.TypeOf((*MockLogger)(nil).StandardInfo), info)
}

// StandardPanic mocks base method.
func (m *MockLogger) StandardPanic(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardPanic", info)
}

// StandardPanic indicates an expected call of StandardPanic.
func (mr *MockLoggerMockRecorder) StandardPanic(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardPanic", reflect.TypeOf((*MockLogger)(nil).StandardPanic), info)
}

// StandardPrint mocks base method.
func (m *MockLogger) StandardPrint(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardPrint", info)
}

// StandardPrint indicates an expected call of StandardPrint.
func (mr *MockLoggerMockRecorder) StandardPrint(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardPrint", reflect.TypeOf((*MockLogger)(nil).StandardPrint), info)
}

// StandardWarn mocks base method.
func (m *MockLogger) StandardWarn(info logs.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StandardWarn", info)
}

// StandardWarn indicates an expected call of StandardWarn.
func (mr *MockLoggerMockRecorder) StandardWarn(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardWarn", reflect.TypeOf((*MockLogger)(nil).StandardWarn), info)
}

// Warn mocks base method.
func (m *MockLogger) Warn(i ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), i...)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// Warnj mocks base method.
func (m *MockLogger) Warnj(j log.JSON) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warnj", j)
}

// Warnj indicates an expected call of Warnj.
func (mr *MockLoggerMockRecorder) Warnj(j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnj", reflect.TypeOf((*MockLogger)(nil).Warnj), j)
}
