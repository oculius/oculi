// Code generated by MockGen. DO NOT EDIT.
// Source: persistent/sql/base.go

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	sql0 "github.com/ravielze/oculi/persistent/sql"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
	logger "gorm.io/gorm/logger"
	schema "gorm.io/gorm/schema"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// AllowGlobalUpdate mocks base method.
func (m *MockConfig) AllowGlobalUpdate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowGlobalUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowGlobalUpdate indicates an expected call of AllowGlobalUpdate.
func (mr *MockConfigMockRecorder) AllowGlobalUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowGlobalUpdate", reflect.TypeOf((*MockConfig)(nil).AllowGlobalUpdate))
}

// ClauseBuilders mocks base method.
func (m *MockConfig) ClauseBuilders() map[string]clause.ClauseBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClauseBuilders")
	ret0, _ := ret[0].(map[string]clause.ClauseBuilder)
	return ret0
}

// ClauseBuilders indicates an expected call of ClauseBuilders.
func (mr *MockConfigMockRecorder) ClauseBuilders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClauseBuilders", reflect.TypeOf((*MockConfig)(nil).ClauseBuilders))
}

// ConnPool mocks base method.
func (m *MockConfig) ConnPool() gorm.ConnPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnPool")
	ret0, _ := ret[0].(gorm.ConnPool)
	return ret0
}

// ConnPool indicates an expected call of ConnPool.
func (mr *MockConfigMockRecorder) ConnPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnPool", reflect.TypeOf((*MockConfig)(nil).ConnPool))
}

// DisableAutomaticPing mocks base method.
func (m *MockConfig) DisableAutomaticPing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutomaticPing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableAutomaticPing indicates an expected call of DisableAutomaticPing.
func (mr *MockConfigMockRecorder) DisableAutomaticPing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutomaticPing", reflect.TypeOf((*MockConfig)(nil).DisableAutomaticPing))
}

// DisableForeignKeyConstraintWhenMigrating mocks base method.
func (m *MockConfig) DisableForeignKeyConstraintWhenMigrating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableForeignKeyConstraintWhenMigrating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableForeignKeyConstraintWhenMigrating indicates an expected call of DisableForeignKeyConstraintWhenMigrating.
func (mr *MockConfigMockRecorder) DisableForeignKeyConstraintWhenMigrating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableForeignKeyConstraintWhenMigrating", reflect.TypeOf((*MockConfig)(nil).DisableForeignKeyConstraintWhenMigrating))
}

// DryRun mocks base method.
func (m *MockConfig) DryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DryRun indicates an expected call of DryRun.
func (mr *MockConfigMockRecorder) DryRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRun", reflect.TypeOf((*MockConfig)(nil).DryRun))
}

// FullSaveAssociations mocks base method.
func (m *MockConfig) FullSaveAssociations() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullSaveAssociations")
	ret0, _ := ret[0].(bool)
	return ret0
}

// FullSaveAssociations indicates an expected call of FullSaveAssociations.
func (mr *MockConfigMockRecorder) FullSaveAssociations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullSaveAssociations", reflect.TypeOf((*MockConfig)(nil).FullSaveAssociations))
}

// Logger mocks base method.
func (m *MockConfig) Logger() logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockConfigMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockConfig)(nil).Logger))
}

// NamingStrategy mocks base method.
func (m *MockConfig) NamingStrategy() schema.Namer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamingStrategy")
	ret0, _ := ret[0].(schema.Namer)
	return ret0
}

// NamingStrategy indicates an expected call of NamingStrategy.
func (mr *MockConfigMockRecorder) NamingStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamingStrategy", reflect.TypeOf((*MockConfig)(nil).NamingStrategy))
}

// NowFunc mocks base method.
func (m *MockConfig) NowFunc() func() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowFunc")
	ret0, _ := ret[0].(func() time.Time)
	return ret0
}

// NowFunc indicates an expected call of NowFunc.
func (mr *MockConfigMockRecorder) NowFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowFunc", reflect.TypeOf((*MockConfig)(nil).NowFunc))
}

// Plugins mocks base method.
func (m *MockConfig) Plugins() map[string]gorm.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plugins")
	ret0, _ := ret[0].(map[string]gorm.Plugin)
	return ret0
}

// Plugins indicates an expected call of Plugins.
func (mr *MockConfigMockRecorder) Plugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugins", reflect.TypeOf((*MockConfig)(nil).Plugins))
}

// PrepareStmt mocks base method.
func (m *MockConfig) PrepareStmt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStmt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrepareStmt indicates an expected call of PrepareStmt.
func (mr *MockConfigMockRecorder) PrepareStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStmt", reflect.TypeOf((*MockConfig)(nil).PrepareStmt))
}

// SkipDefaultTransaction mocks base method.
func (m *MockConfig) SkipDefaultTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipDefaultTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipDefaultTransaction indicates an expected call of SkipDefaultTransaction.
func (mr *MockConfigMockRecorder) SkipDefaultTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipDefaultTransaction", reflect.TypeOf((*MockConfig)(nil).SkipDefaultTransaction))
}

// MockChainableAPI is a mock of ChainableAPI interface.
type MockChainableAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChainableAPIMockRecorder
}

// MockChainableAPIMockRecorder is the mock recorder for MockChainableAPI.
type MockChainableAPIMockRecorder struct {
	mock *MockChainableAPI
}

// NewMockChainableAPI creates a new mock instance.
func NewMockChainableAPI(ctrl *gomock.Controller) *MockChainableAPI {
	mock := &MockChainableAPI{ctrl: ctrl}
	mock.recorder = &MockChainableAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainableAPI) EXPECT() *MockChainableAPIMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockChainableAPI) Assign(attrs ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockChainableAPIMockRecorder) Assign(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockChainableAPI)(nil).Assign), attrs...)
}

// Attrs mocks base method.
func (m *MockChainableAPI) Attrs(attrs ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockChainableAPIMockRecorder) Attrs(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockChainableAPI)(nil).Attrs), attrs...)
}

// Clauses mocks base method.
func (m *MockChainableAPI) Clauses(conds ...clause.Expression) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockChainableAPIMockRecorder) Clauses(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockChainableAPI)(nil).Clauses), conds...)
}

// Distinct mocks base method.
func (m *MockChainableAPI) Distinct(args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockChainableAPIMockRecorder) Distinct(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockChainableAPI)(nil).Distinct), args...)
}

// Group mocks base method.
func (m *MockChainableAPI) Group(name string) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", name)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockChainableAPIMockRecorder) Group(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockChainableAPI)(nil).Group), name)
}

// Having mocks base method.
func (m *MockChainableAPI) Having(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockChainableAPIMockRecorder) Having(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockChainableAPI)(nil).Having), varargs...)
}

// Joins mocks base method.
func (m *MockChainableAPI) Joins(query string, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockChainableAPIMockRecorder) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockChainableAPI)(nil).Joins), varargs...)
}

// Limit mocks base method.
func (m *MockChainableAPI) Limit(limit int) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockChainableAPIMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockChainableAPI)(nil).Limit), limit)
}

// Model mocks base method.
func (m *MockChainableAPI) Model(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockChainableAPIMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockChainableAPI)(nil).Model), value)
}

// Not mocks base method.
func (m *MockChainableAPI) Not(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Not indicates an expected call of Not.
func (mr *MockChainableAPIMockRecorder) Not(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockChainableAPI)(nil).Not), varargs...)
}

// Offset mocks base method.
func (m *MockChainableAPI) Offset(offset int) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockChainableAPIMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockChainableAPI)(nil).Offset), offset)
}

// Omit mocks base method.
func (m *MockChainableAPI) Omit(columns ...string) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockChainableAPIMockRecorder) Omit(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockChainableAPI)(nil).Omit), columns...)
}

// Or mocks base method.
func (m *MockChainableAPI) Or(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockChainableAPIMockRecorder) Or(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockChainableAPI)(nil).Or), varargs...)
}

// Order mocks base method.
func (m *MockChainableAPI) Order(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockChainableAPIMockRecorder) Order(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockChainableAPI)(nil).Order), value)
}

// Preload mocks base method.
func (m *MockChainableAPI) Preload(query string, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockChainableAPIMockRecorder) Preload(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockChainableAPI)(nil).Preload), varargs...)
}

// Raw mocks base method.
func (m *MockChainableAPI) Raw(sql string, values ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockChainableAPIMockRecorder) Raw(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockChainableAPI)(nil).Raw), varargs...)
}

// Scopes mocks base method.
func (m *MockChainableAPI) Scopes(funcs ...func(sql0.API) sql0.API) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockChainableAPIMockRecorder) Scopes(funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockChainableAPI)(nil).Scopes), funcs...)
}

// Select mocks base method.
func (m *MockChainableAPI) Select(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockChainableAPIMockRecorder) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockChainableAPI)(nil).Select), varargs...)
}

// Table mocks base method.
func (m *MockChainableAPI) Table(name string, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockChainableAPIMockRecorder) Table(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockChainableAPI)(nil).Table), varargs...)
}

// Unscoped mocks base method.
func (m *MockChainableAPI) Unscoped() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockChainableAPIMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockChainableAPI)(nil).Unscoped))
}

// Where mocks base method.
func (m *MockChainableAPI) Where(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockChainableAPIMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockChainableAPI)(nil).Where), varargs...)
}

// MockFinisherAPI is a mock of FinisherAPI interface.
type MockFinisherAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFinisherAPIMockRecorder
}

// MockFinisherAPIMockRecorder is the mock recorder for MockFinisherAPI.
type MockFinisherAPIMockRecorder struct {
	mock *MockFinisherAPI
}

// NewMockFinisherAPI creates a new mock instance.
func NewMockFinisherAPI(ctrl *gomock.Controller) *MockFinisherAPI {
	mock := &MockFinisherAPI{ctrl: ctrl}
	mock.recorder = &MockFinisherAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinisherAPI) EXPECT() *MockFinisherAPIMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockFinisherAPI) Begin(opts ...*sql.TxOptions) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockFinisherAPIMockRecorder) Begin(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockFinisherAPI)(nil).Begin), opts...)
}

// Commit mocks base method.
func (m *MockFinisherAPI) Commit() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockFinisherAPIMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockFinisherAPI)(nil).Commit))
}

// Count mocks base method.
func (m *MockFinisherAPI) Count(count *int64) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", count)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockFinisherAPIMockRecorder) Count(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockFinisherAPI)(nil).Count), count)
}

// Create mocks base method.
func (m *MockFinisherAPI) Create(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFinisherAPIMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFinisherAPI)(nil).Create), value)
}

// Delete mocks base method.
func (m *MockFinisherAPI) Delete(value interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFinisherAPIMockRecorder) Delete(value interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFinisherAPI)(nil).Delete), varargs...)
}

// Exec mocks base method.
func (m *MockFinisherAPI) Exec(sql string, values ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockFinisherAPIMockRecorder) Exec(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockFinisherAPI)(nil).Exec), varargs...)
}

// Find mocks base method.
func (m *MockFinisherAPI) Find(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockFinisherAPIMockRecorder) Find(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFinisherAPI)(nil).Find), varargs...)
}

// FindInBatches mocks base method.
func (m *MockFinisherAPI) FindInBatches(dest interface{}, batchSize int, fc func(sql0.API, int) error) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatches", dest, batchSize, fc)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// FindInBatches indicates an expected call of FindInBatches.
func (mr *MockFinisherAPIMockRecorder) FindInBatches(dest, batchSize, fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatches", reflect.TypeOf((*MockFinisherAPI)(nil).FindInBatches), dest, batchSize, fc)
}

// First mocks base method.
func (m *MockFinisherAPI) First(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockFinisherAPIMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockFinisherAPI)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockFinisherAPI) FirstOrCreate(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockFinisherAPIMockRecorder) FirstOrCreate(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockFinisherAPI)(nil).FirstOrCreate), varargs...)
}

// FirstOrInit mocks base method.
func (m *MockFinisherAPI) FirstOrInit(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit.
func (mr *MockFinisherAPIMockRecorder) FirstOrInit(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockFinisherAPI)(nil).FirstOrInit), varargs...)
}

// Last mocks base method.
func (m *MockFinisherAPI) Last(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockFinisherAPIMockRecorder) Last(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockFinisherAPI)(nil).Last), varargs...)
}

// Pluck mocks base method.
func (m *MockFinisherAPI) Pluck(column string, dest interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", column, dest)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockFinisherAPIMockRecorder) Pluck(column, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockFinisherAPI)(nil).Pluck), column, dest)
}

// Rollback mocks base method.
func (m *MockFinisherAPI) Rollback() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockFinisherAPIMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockFinisherAPI)(nil).Rollback))
}

// RollbackTo mocks base method.
func (m *MockFinisherAPI) RollbackTo(name string) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", name)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo.
func (mr *MockFinisherAPIMockRecorder) RollbackTo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockFinisherAPI)(nil).RollbackTo), name)
}

// Row mocks base method.
func (m *MockFinisherAPI) Row() *sql.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row")
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row.
func (mr *MockFinisherAPIMockRecorder) Row() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockFinisherAPI)(nil).Row))
}

// Rows mocks base method.
func (m *MockFinisherAPI) Rows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockFinisherAPIMockRecorder) Rows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockFinisherAPI)(nil).Rows))
}

// Save mocks base method.
func (m *MockFinisherAPI) Save(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFinisherAPIMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFinisherAPI)(nil).Save), value)
}

// SavePoint mocks base method.
func (m *MockFinisherAPI) SavePoint(name string) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", name)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockFinisherAPIMockRecorder) SavePoint(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockFinisherAPI)(nil).SavePoint), name)
}

// Scan mocks base method.
func (m *MockFinisherAPI) Scan(dest interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockFinisherAPIMockRecorder) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockFinisherAPI)(nil).Scan), dest)
}

// ScanRows mocks base method.
func (m *MockFinisherAPI) ScanRows(rows *sql.Rows, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRows", rows, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows.
func (mr *MockFinisherAPIMockRecorder) ScanRows(rows, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockFinisherAPI)(nil).ScanRows), rows, dest)
}

// Take mocks base method.
func (m *MockFinisherAPI) Take(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockFinisherAPIMockRecorder) Take(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockFinisherAPI)(nil).Take), varargs...)
}

// Transaction mocks base method.
func (m *MockFinisherAPI) Transaction(fc func(sql0.API) error, opts ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockFinisherAPIMockRecorder) Transaction(fc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockFinisherAPI)(nil).Transaction), varargs...)
}

// Update mocks base method.
func (m *MockFinisherAPI) Update(column string, value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFinisherAPIMockRecorder) Update(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFinisherAPI)(nil).Update), column, value)
}

// UpdateColumn mocks base method.
func (m *MockFinisherAPI) UpdateColumn(column string, value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumn", column, value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn.
func (mr *MockFinisherAPIMockRecorder) UpdateColumn(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockFinisherAPI)(nil).UpdateColumn), column, value)
}

// UpdateColumns mocks base method.
func (m *MockFinisherAPI) UpdateColumns(values interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", values)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockFinisherAPIMockRecorder) UpdateColumns(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockFinisherAPI)(nil).UpdateColumns), values)
}

// Updates mocks base method.
func (m *MockFinisherAPI) Updates(values interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockFinisherAPIMockRecorder) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockFinisherAPI)(nil).Updates), values)
}

// MockModelerAPI is a mock of ModelerAPI interface.
type MockModelerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelerAPIMockRecorder
}

// MockModelerAPIMockRecorder is the mock recorder for MockModelerAPI.
type MockModelerAPIMockRecorder struct {
	mock *MockModelerAPI
}

// NewMockModelerAPI creates a new mock instance.
func NewMockModelerAPI(ctrl *gomock.Controller) *MockModelerAPI {
	mock := &MockModelerAPI{ctrl: ctrl}
	mock.recorder = &MockModelerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelerAPI) EXPECT() *MockModelerAPIMockRecorder {
	return m.recorder
}

// ObjectFunction mocks base method.
func (m *MockModelerAPI) ObjectFunction(onInstall, onReset func()) (func(), func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectFunction", onInstall, onReset)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ObjectFunction indicates an expected call of ObjectFunction.
func (mr *MockModelerAPIMockRecorder) ObjectFunction(onInstall, onReset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectFunction", reflect.TypeOf((*MockModelerAPI)(nil).ObjectFunction), onInstall, onReset)
}

// RegisterObject mocks base method.
func (m *MockModelerAPI) RegisterObject(obj ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range obj {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterObject", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// RegisterObject indicates an expected call of RegisterObject.
func (mr *MockModelerAPIMockRecorder) RegisterObject(obj ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObject", reflect.TypeOf((*MockModelerAPI)(nil).RegisterObject), obj...)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockAPI) AddError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockAPIMockRecorder) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockAPI)(nil).AddError), err)
}

// AllowGlobalUpdate mocks base method.
func (m *MockAPI) AllowGlobalUpdate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowGlobalUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowGlobalUpdate indicates an expected call of AllowGlobalUpdate.
func (mr *MockAPIMockRecorder) AllowGlobalUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowGlobalUpdate", reflect.TypeOf((*MockAPI)(nil).AllowGlobalUpdate))
}

// Assign mocks base method.
func (m *MockAPI) Assign(attrs ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockAPIMockRecorder) Assign(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockAPI)(nil).Assign), attrs...)
}

// Association mocks base method.
func (m *MockAPI) Association(column string) *gorm.Association {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Association", column)
	ret0, _ := ret[0].(*gorm.Association)
	return ret0
}

// Association indicates an expected call of Association.
func (mr *MockAPIMockRecorder) Association(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Association", reflect.TypeOf((*MockAPI)(nil).Association), column)
}

// Attrs mocks base method.
func (m *MockAPI) Attrs(attrs ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockAPIMockRecorder) Attrs(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockAPI)(nil).Attrs), attrs...)
}

// AutoMigrate mocks base method.
func (m *MockAPI) AutoMigrate(dst ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockAPIMockRecorder) AutoMigrate(dst ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockAPI)(nil).AutoMigrate), dst...)
}

// Begin mocks base method.
func (m *MockAPI) Begin(opts ...*sql.TxOptions) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockAPIMockRecorder) Begin(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockAPI)(nil).Begin), opts...)
}

// ClauseBuilders mocks base method.
func (m *MockAPI) ClauseBuilders() map[string]clause.ClauseBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClauseBuilders")
	ret0, _ := ret[0].(map[string]clause.ClauseBuilder)
	return ret0
}

// ClauseBuilders indicates an expected call of ClauseBuilders.
func (mr *MockAPIMockRecorder) ClauseBuilders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClauseBuilders", reflect.TypeOf((*MockAPI)(nil).ClauseBuilders))
}

// Clauses mocks base method.
func (m *MockAPI) Clauses(conds ...clause.Expression) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockAPIMockRecorder) Clauses(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockAPI)(nil).Clauses), conds...)
}

// Commit mocks base method.
func (m *MockAPI) Commit() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockAPIMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockAPI)(nil).Commit))
}

// ConnPool mocks base method.
func (m *MockAPI) ConnPool() gorm.ConnPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnPool")
	ret0, _ := ret[0].(gorm.ConnPool)
	return ret0
}

// ConnPool indicates an expected call of ConnPool.
func (mr *MockAPIMockRecorder) ConnPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnPool", reflect.TypeOf((*MockAPI)(nil).ConnPool))
}

// Count mocks base method.
func (m *MockAPI) Count(count *int64) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", count)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockAPIMockRecorder) Count(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAPI)(nil).Count), count)
}

// Create mocks base method.
func (m *MockAPI) Create(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAPIMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPI)(nil).Create), value)
}

// DB mocks base method.
func (m *MockAPI) DB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DB indicates an expected call of DB.
func (mr *MockAPIMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockAPI)(nil).DB))
}

// Debug mocks base method.
func (m *MockAPI) Debug() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockAPIMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockAPI)(nil).Debug))
}

// Delete mocks base method.
func (m *MockAPI) Delete(value interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAPIMockRecorder) Delete(value interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAPI)(nil).Delete), varargs...)
}

// Dialector mocks base method.
func (m *MockAPI) Dialector() gorm.Dialector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialector")
	ret0, _ := ret[0].(gorm.Dialector)
	return ret0
}

// Dialector indicates an expected call of Dialector.
func (mr *MockAPIMockRecorder) Dialector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialector", reflect.TypeOf((*MockAPI)(nil).Dialector))
}

// DisableAutomaticPing mocks base method.
func (m *MockAPI) DisableAutomaticPing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAutomaticPing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableAutomaticPing indicates an expected call of DisableAutomaticPing.
func (mr *MockAPIMockRecorder) DisableAutomaticPing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAutomaticPing", reflect.TypeOf((*MockAPI)(nil).DisableAutomaticPing))
}

// DisableForeignKeyConstraintWhenMigrating mocks base method.
func (m *MockAPI) DisableForeignKeyConstraintWhenMigrating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableForeignKeyConstraintWhenMigrating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DisableForeignKeyConstraintWhenMigrating indicates an expected call of DisableForeignKeyConstraintWhenMigrating.
func (mr *MockAPIMockRecorder) DisableForeignKeyConstraintWhenMigrating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableForeignKeyConstraintWhenMigrating", reflect.TypeOf((*MockAPI)(nil).DisableForeignKeyConstraintWhenMigrating))
}

// Distinct mocks base method.
func (m *MockAPI) Distinct(args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockAPIMockRecorder) Distinct(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockAPI)(nil).Distinct), args...)
}

// DryRun mocks base method.
func (m *MockAPI) DryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DryRun indicates an expected call of DryRun.
func (mr *MockAPIMockRecorder) DryRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DryRun", reflect.TypeOf((*MockAPI)(nil).DryRun))
}

// Error mocks base method.
func (m *MockAPI) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockAPIMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockAPI)(nil).Error))
}

// Exec mocks base method.
func (m *MockAPI) Exec(sql string, values ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockAPIMockRecorder) Exec(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockAPI)(nil).Exec), varargs...)
}

// Find mocks base method.
func (m *MockAPI) Find(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockAPIMockRecorder) Find(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAPI)(nil).Find), varargs...)
}

// FindInBatches mocks base method.
func (m *MockAPI) FindInBatches(dest interface{}, batchSize int, fc func(sql0.API, int) error) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatches", dest, batchSize, fc)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// FindInBatches indicates an expected call of FindInBatches.
func (mr *MockAPIMockRecorder) FindInBatches(dest, batchSize, fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatches", reflect.TypeOf((*MockAPI)(nil).FindInBatches), dest, batchSize, fc)
}

// First mocks base method.
func (m *MockAPI) First(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockAPIMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockAPI)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockAPI) FirstOrCreate(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockAPIMockRecorder) FirstOrCreate(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockAPI)(nil).FirstOrCreate), varargs...)
}

// FirstOrInit mocks base method.
func (m *MockAPI) FirstOrInit(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit.
func (mr *MockAPIMockRecorder) FirstOrInit(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockAPI)(nil).FirstOrInit), varargs...)
}

// FullSaveAssociations mocks base method.
func (m *MockAPI) FullSaveAssociations() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullSaveAssociations")
	ret0, _ := ret[0].(bool)
	return ret0
}

// FullSaveAssociations indicates an expected call of FullSaveAssociations.
func (mr *MockAPIMockRecorder) FullSaveAssociations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullSaveAssociations", reflect.TypeOf((*MockAPI)(nil).FullSaveAssociations))
}

// Get mocks base method.
func (m *MockAPI) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAPIMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPI)(nil).Get), key)
}

// Gorm mocks base method.
func (m *MockAPI) Gorm() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gorm")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Gorm indicates an expected call of Gorm.
func (mr *MockAPIMockRecorder) Gorm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gorm", reflect.TypeOf((*MockAPI)(nil).Gorm))
}

// Group mocks base method.
func (m *MockAPI) Group(name string) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", name)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockAPIMockRecorder) Group(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockAPI)(nil).Group), name)
}

// Having mocks base method.
func (m *MockAPI) Having(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockAPIMockRecorder) Having(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockAPI)(nil).Having), varargs...)
}

// InstanceGet mocks base method.
func (m *MockAPI) InstanceGet(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGet", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// InstanceGet indicates an expected call of InstanceGet.
func (mr *MockAPIMockRecorder) InstanceGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGet", reflect.TypeOf((*MockAPI)(nil).InstanceGet), key)
}

// InstanceSet mocks base method.
func (m *MockAPI) InstanceSet(key string, value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceSet", key, value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// InstanceSet indicates an expected call of InstanceSet.
func (mr *MockAPIMockRecorder) InstanceSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceSet", reflect.TypeOf((*MockAPI)(nil).InstanceSet), key, value)
}

// Joins mocks base method.
func (m *MockAPI) Joins(query string, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockAPIMockRecorder) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockAPI)(nil).Joins), varargs...)
}

// Last mocks base method.
func (m *MockAPI) Last(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockAPIMockRecorder) Last(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockAPI)(nil).Last), varargs...)
}

// Limit mocks base method.
func (m *MockAPI) Limit(limit int) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockAPIMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockAPI)(nil).Limit), limit)
}

// Logger mocks base method.
func (m *MockAPI) Logger() logger.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logger.Interface)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockAPIMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockAPI)(nil).Logger))
}

// Migrator mocks base method.
func (m *MockAPI) Migrator() gorm.Migrator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrator")
	ret0, _ := ret[0].(gorm.Migrator)
	return ret0
}

// Migrator indicates an expected call of Migrator.
func (mr *MockAPIMockRecorder) Migrator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrator", reflect.TypeOf((*MockAPI)(nil).Migrator))
}

// Model mocks base method.
func (m *MockAPI) Model(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockAPIMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockAPI)(nil).Model), value)
}

// NamingStrategy mocks base method.
func (m *MockAPI) NamingStrategy() schema.Namer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamingStrategy")
	ret0, _ := ret[0].(schema.Namer)
	return ret0
}

// NamingStrategy indicates an expected call of NamingStrategy.
func (mr *MockAPIMockRecorder) NamingStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamingStrategy", reflect.TypeOf((*MockAPI)(nil).NamingStrategy))
}

// Not mocks base method.
func (m *MockAPI) Not(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Not indicates an expected call of Not.
func (mr *MockAPIMockRecorder) Not(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockAPI)(nil).Not), varargs...)
}

// NowFunc mocks base method.
func (m *MockAPI) NowFunc() func() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowFunc")
	ret0, _ := ret[0].(func() time.Time)
	return ret0
}

// NowFunc indicates an expected call of NowFunc.
func (mr *MockAPIMockRecorder) NowFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowFunc", reflect.TypeOf((*MockAPI)(nil).NowFunc))
}

// ObjectFunction mocks base method.
func (m *MockAPI) ObjectFunction(onInstall, onReset func()) (func(), func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectFunction", onInstall, onReset)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// ObjectFunction indicates an expected call of ObjectFunction.
func (mr *MockAPIMockRecorder) ObjectFunction(onInstall, onReset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectFunction", reflect.TypeOf((*MockAPI)(nil).ObjectFunction), onInstall, onReset)
}

// Offset mocks base method.
func (m *MockAPI) Offset(offset int) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockAPIMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockAPI)(nil).Offset), offset)
}

// Omit mocks base method.
func (m *MockAPI) Omit(columns ...string) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockAPIMockRecorder) Omit(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockAPI)(nil).Omit), columns...)
}

// Or mocks base method.
func (m *MockAPI) Or(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockAPIMockRecorder) Or(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockAPI)(nil).Or), varargs...)
}

// Order mocks base method.
func (m *MockAPI) Order(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockAPIMockRecorder) Order(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockAPI)(nil).Order), value)
}

// Ping mocks base method.
func (m *MockAPI) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAPIMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAPI)(nil).Ping), ctx)
}

// Pluck mocks base method.
func (m *MockAPI) Pluck(column string, dest interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", column, dest)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockAPIMockRecorder) Pluck(column, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockAPI)(nil).Pluck), column, dest)
}

// Plugins mocks base method.
func (m *MockAPI) Plugins() map[string]gorm.Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plugins")
	ret0, _ := ret[0].(map[string]gorm.Plugin)
	return ret0
}

// Plugins indicates an expected call of Plugins.
func (mr *MockAPIMockRecorder) Plugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plugins", reflect.TypeOf((*MockAPI)(nil).Plugins))
}

// Preload mocks base method.
func (m *MockAPI) Preload(query string, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockAPIMockRecorder) Preload(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockAPI)(nil).Preload), varargs...)
}

// PrepareStmt mocks base method.
func (m *MockAPI) PrepareStmt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStmt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrepareStmt indicates an expected call of PrepareStmt.
func (mr *MockAPIMockRecorder) PrepareStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStmt", reflect.TypeOf((*MockAPI)(nil).PrepareStmt))
}

// Raw mocks base method.
func (m *MockAPI) Raw(sql string, values ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockAPIMockRecorder) Raw(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockAPI)(nil).Raw), varargs...)
}

// RegisterObject mocks base method.
func (m *MockAPI) RegisterObject(obj ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range obj {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterObject", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// RegisterObject indicates an expected call of RegisterObject.
func (mr *MockAPIMockRecorder) RegisterObject(obj ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObject", reflect.TypeOf((*MockAPI)(nil).RegisterObject), obj...)
}

// Rollback mocks base method.
func (m *MockAPI) Rollback() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockAPIMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockAPI)(nil).Rollback))
}

// RollbackTo mocks base method.
func (m *MockAPI) RollbackTo(name string) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", name)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo.
func (mr *MockAPIMockRecorder) RollbackTo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockAPI)(nil).RollbackTo), name)
}

// Row mocks base method.
func (m *MockAPI) Row() *sql.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row")
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row.
func (mr *MockAPIMockRecorder) Row() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockAPI)(nil).Row))
}

// Rows mocks base method.
func (m *MockAPI) Rows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockAPIMockRecorder) Rows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockAPI)(nil).Rows))
}

// RowsAffected mocks base method.
func (m *MockAPI) RowsAffected() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	return ret0
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockAPIMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockAPI)(nil).RowsAffected))
}

// Save mocks base method.
func (m *MockAPI) Save(value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAPIMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAPI)(nil).Save), value)
}

// SavePoint mocks base method.
func (m *MockAPI) SavePoint(name string) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", name)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockAPIMockRecorder) SavePoint(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockAPI)(nil).SavePoint), name)
}

// Scan mocks base method.
func (m *MockAPI) Scan(dest interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockAPIMockRecorder) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockAPI)(nil).Scan), dest)
}

// ScanRows mocks base method.
func (m *MockAPI) ScanRows(rows *sql.Rows, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRows", rows, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows.
func (mr *MockAPIMockRecorder) ScanRows(rows, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockAPI)(nil).ScanRows), rows, dest)
}

// Scopes mocks base method.
func (m *MockAPI) Scopes(funcs ...func(sql0.API) sql0.API) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockAPIMockRecorder) Scopes(funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockAPI)(nil).Scopes), funcs...)
}

// Select mocks base method.
func (m *MockAPI) Select(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockAPIMockRecorder) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockAPI)(nil).Select), varargs...)
}

// Session mocks base method.
func (m *MockAPI) Session(config *gorm.Session) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", config)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockAPIMockRecorder) Session(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAPI)(nil).Session), config)
}

// Set mocks base method.
func (m *MockAPI) Set(key string, value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockAPIMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockAPI)(nil).Set), key, value)
}

// SetupJoinTable mocks base method.
func (m *MockAPI) SetupJoinTable(model interface{}, field string, joinTable interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupJoinTable", model, field, joinTable)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupJoinTable indicates an expected call of SetupJoinTable.
func (mr *MockAPIMockRecorder) SetupJoinTable(model, field, joinTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupJoinTable", reflect.TypeOf((*MockAPI)(nil).SetupJoinTable), model, field, joinTable)
}

// SkipDefaultTransaction mocks base method.
func (m *MockAPI) SkipDefaultTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipDefaultTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipDefaultTransaction indicates an expected call of SkipDefaultTransaction.
func (mr *MockAPIMockRecorder) SkipDefaultTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipDefaultTransaction", reflect.TypeOf((*MockAPI)(nil).SkipDefaultTransaction))
}

// Statement mocks base method.
func (m *MockAPI) Statement() *gorm.Statement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement")
	ret0, _ := ret[0].(*gorm.Statement)
	return ret0
}

// Statement indicates an expected call of Statement.
func (mr *MockAPIMockRecorder) Statement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockAPI)(nil).Statement))
}

// Table mocks base method.
func (m *MockAPI) Table(name string, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockAPIMockRecorder) Table(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockAPI)(nil).Table), varargs...)
}

// Take mocks base method.
func (m *MockAPI) Take(dest interface{}, conds ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockAPIMockRecorder) Take(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockAPI)(nil).Take), varargs...)
}

// Transaction mocks base method.
func (m *MockAPI) Transaction(fc func(sql0.API) error, opts ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockAPIMockRecorder) Transaction(fc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockAPI)(nil).Transaction), varargs...)
}

// Unscoped mocks base method.
func (m *MockAPI) Unscoped() sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockAPIMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockAPI)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockAPI) Update(column string, value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAPIMockRecorder) Update(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAPI)(nil).Update), column, value)
}

// UpdateColumn mocks base method.
func (m *MockAPI) UpdateColumn(column string, value interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumn", column, value)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn.
func (mr *MockAPIMockRecorder) UpdateColumn(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockAPI)(nil).UpdateColumn), column, value)
}

// UpdateColumns mocks base method.
func (m *MockAPI) UpdateColumns(values interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", values)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockAPIMockRecorder) UpdateColumns(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockAPI)(nil).UpdateColumns), values)
}

// Updates mocks base method.
func (m *MockAPI) Updates(values interface{}) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockAPIMockRecorder) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockAPI)(nil).Updates), values)
}

// Use mocks base method.
func (m *MockAPI) Use(plugin gorm.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", plugin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockAPIMockRecorder) Use(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockAPI)(nil).Use), plugin)
}

// Where mocks base method.
func (m *MockAPI) Where(query interface{}, args ...interface{}) sql0.API {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockAPIMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockAPI)(nil).Where), varargs...)
}

// WithContext mocks base method.
func (m *MockAPI) WithContext(ctx context.Context) sql0.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(sql0.API)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockAPIMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockAPI)(nil).WithContext), ctx)
}
