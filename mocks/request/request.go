// Code generated by MockGen. DO NOT EDIT.
// Source: request/request.go

// Package mock_request is a generated GoMock package.
package mock_request

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	sql "github.com/ravielze/oculi/persistent/sql"
	request "github.com/ravielze/oculi/request"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockContext) AddError(responseCode int, err ...error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{responseCode}
	for _, a := range err {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddError", varargs...)
}

// AddError indicates an expected call of AddError.
func (mr *MockContextMockRecorder) AddError(responseCode interface{}, err ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{responseCode}, err...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockContext)(nil).AddError), varargs...)
}

// CommitTransaction mocks base method.
func (m *MockContext) CommitTransaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockContextMockRecorder) CommitTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockContext)(nil).CommitTransaction))
}

// Data mocks base method.
func (m *MockContext) Data() *map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(*map[string]string)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockContextMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockContext)(nil).Data))
}

// Error mocks base method.
func (m *MockContext) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockContextMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockContext)(nil).Error))
}

// GetContext mocks base method.
func (m *MockContext) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockContextMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockContext)(nil).GetContext))
}

// HasError mocks base method.
func (m *MockContext) HasError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasError indicates an expected call of HasError.
func (mr *MockContextMockRecorder) HasError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasError", reflect.TypeOf((*MockContext)(nil).HasError))
}

// HasTransaction mocks base method.
func (m *MockContext) HasTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTransaction indicates an expected call of HasTransaction.
func (mr *MockContextMockRecorder) HasTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTransaction", reflect.TypeOf((*MockContext)(nil).HasTransaction))
}

// Identifier mocks base method.
func (m *MockContext) Identifier() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockContextMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockContext)(nil).Identifier))
}

// NewTransaction mocks base method.
func (m *MockContext) NewTransaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockContextMockRecorder) NewTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockContext)(nil).NewTransaction))
}

// Parse36 mocks base method.
func (m *MockContext) Parse36(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse36", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// Parse36 indicates an expected call of Parse36.
func (mr *MockContextMockRecorder) Parse36(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse36", reflect.TypeOf((*MockContext)(nil).Parse36), key, value)
}

// Parse36UUID mocks base method.
func (m *MockContext) Parse36UUID(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse36UUID", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// Parse36UUID indicates an expected call of Parse36UUID.
func (mr *MockContextMockRecorder) Parse36UUID(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse36UUID", reflect.TypeOf((*MockContext)(nil).Parse36UUID), key, value)
}

// ParseBoolean mocks base method.
func (m *MockContext) ParseBoolean(key, value string, def bool) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBoolean", key, value, def)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseBoolean indicates an expected call of ParseBoolean.
func (mr *MockContextMockRecorder) ParseBoolean(key, value, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBoolean", reflect.TypeOf((*MockContext)(nil).ParseBoolean), key, value, def)
}

// ParseString mocks base method.
func (m *MockContext) ParseString(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseString", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseString indicates an expected call of ParseString.
func (mr *MockContextMockRecorder) ParseString(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseString", reflect.TypeOf((*MockContext)(nil).ParseString), key, value)
}

// ParseStringOrDefault mocks base method.
func (m *MockContext) ParseStringOrDefault(key, value, def string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseStringOrDefault", key, value, def)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseStringOrDefault indicates an expected call of ParseStringOrDefault.
func (mr *MockContextMockRecorder) ParseStringOrDefault(key, value, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseStringOrDefault", reflect.TypeOf((*MockContext)(nil).ParseStringOrDefault), key, value, def)
}

// ParseUUID mocks base method.
func (m *MockContext) ParseUUID(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUUID", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseUUID indicates an expected call of ParseUUID.
func (mr *MockContextMockRecorder) ParseUUID(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUUID", reflect.TypeOf((*MockContext)(nil).ParseUUID), key, value)
}

// ParseUUID36 mocks base method.
func (m *MockContext) ParseUUID36(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUUID36", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseUUID36 indicates an expected call of ParseUUID36.
func (mr *MockContextMockRecorder) ParseUUID36(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUUID36", reflect.TypeOf((*MockContext)(nil).ParseUUID36), key, value)
}

// ResponseCode mocks base method.
func (m *MockContext) ResponseCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ResponseCode indicates an expected call of ResponseCode.
func (mr *MockContextMockRecorder) ResponseCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseCode", reflect.TypeOf((*MockContext)(nil).ResponseCode))
}

// RollbackTransaction mocks base method.
func (m *MockContext) RollbackTransaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockContextMockRecorder) RollbackTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockContext)(nil).RollbackTransaction))
}

// SetContext mocks base method.
func (m *MockContext) SetContext(ctx context.Context) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContext", ctx)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// SetContext indicates an expected call of SetContext.
func (mr *MockContextMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockContext)(nil).SetContext), ctx)
}

// SetResponseCode mocks base method.
func (m *MockContext) SetResponseCode(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseCode", code)
}

// SetResponseCode indicates an expected call of SetResponseCode.
func (mr *MockContextMockRecorder) SetResponseCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseCode", reflect.TypeOf((*MockContext)(nil).SetResponseCode), code)
}

// Transaction mocks base method.
func (m *MockContext) Transaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockContextMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockContext)(nil).Transaction))
}

// MockNonEchoContext is a mock of NonEchoContext interface.
type MockNonEchoContext struct {
	ctrl     *gomock.Controller
	recorder *MockNonEchoContextMockRecorder
}

// MockNonEchoContextMockRecorder is the mock recorder for MockNonEchoContext.
type MockNonEchoContextMockRecorder struct {
	mock *MockNonEchoContext
}

// NewMockNonEchoContext creates a new mock instance.
func NewMockNonEchoContext(ctrl *gomock.Controller) *MockNonEchoContext {
	mock := &MockNonEchoContext{ctrl: ctrl}
	mock.recorder = &MockNonEchoContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonEchoContext) EXPECT() *MockNonEchoContextMockRecorder {
	return m.recorder
}

// BindValidate mocks base method.
func (m *MockNonEchoContext) BindValidate(obj interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindValidate", obj)
}

// BindValidate indicates an expected call of BindValidate.
func (mr *MockNonEchoContextMockRecorder) BindValidate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindValidate", reflect.TypeOf((*MockNonEchoContext)(nil).BindValidate), obj)
}

// MockEchoContext is a mock of EchoContext interface.
type MockEchoContext struct {
	ctrl     *gomock.Controller
	recorder *MockEchoContextMockRecorder
}

// MockEchoContextMockRecorder is the mock recorder for MockEchoContext.
type MockEchoContextMockRecorder struct {
	mock *MockEchoContext
}

// NewMockEchoContext creates a new mock instance.
func NewMockEchoContext(ctrl *gomock.Controller) *MockEchoContext {
	mock := &MockEchoContext{ctrl: ctrl}
	mock.recorder = &MockEchoContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoContext) EXPECT() *MockEchoContextMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockEchoContext) AddError(responseCode int, err ...error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{responseCode}
	for _, a := range err {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddError", varargs...)
}

// AddError indicates an expected call of AddError.
func (mr *MockEchoContextMockRecorder) AddError(responseCode interface{}, err ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{responseCode}, err...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockEchoContext)(nil).AddError), varargs...)
}

// CommitTransaction mocks base method.
func (m *MockEchoContext) CommitTransaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockEchoContextMockRecorder) CommitTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockEchoContext)(nil).CommitTransaction))
}

// Data mocks base method.
func (m *MockEchoContext) Data() *map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(*map[string]string)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockEchoContextMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockEchoContext)(nil).Data))
}

// Echo mocks base method.
func (m *MockEchoContext) Echo() echo.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo")
	ret0, _ := ret[0].(echo.Context)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockEchoContextMockRecorder) Echo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockEchoContext)(nil).Echo))
}

// Error mocks base method.
func (m *MockEchoContext) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockEchoContextMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockEchoContext)(nil).Error))
}

// GetContext mocks base method.
func (m *MockEchoContext) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockEchoContextMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockEchoContext)(nil).GetContext))
}

// HasError mocks base method.
func (m *MockEchoContext) HasError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasError indicates an expected call of HasError.
func (mr *MockEchoContextMockRecorder) HasError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasError", reflect.TypeOf((*MockEchoContext)(nil).HasError))
}

// HasTransaction mocks base method.
func (m *MockEchoContext) HasTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTransaction indicates an expected call of HasTransaction.
func (mr *MockEchoContextMockRecorder) HasTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTransaction", reflect.TypeOf((*MockEchoContext)(nil).HasTransaction))
}

// Identifier mocks base method.
func (m *MockEchoContext) Identifier() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockEchoContextMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockEchoContext)(nil).Identifier))
}

// NewTransaction mocks base method.
func (m *MockEchoContext) NewTransaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockEchoContextMockRecorder) NewTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockEchoContext)(nil).NewTransaction))
}

// Param mocks base method.
func (m *MockEchoContext) Param(param string) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", param)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockEchoContextMockRecorder) Param(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockEchoContext)(nil).Param), param)
}

// Param36 mocks base method.
func (m *MockEchoContext) Param36(param string) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param36", param)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// Param36 indicates an expected call of Param36.
func (mr *MockEchoContextMockRecorder) Param36(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param36", reflect.TypeOf((*MockEchoContext)(nil).Param36), param)
}

// Param36UUID mocks base method.
func (m *MockEchoContext) Param36UUID(param string) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param36UUID", param)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// Param36UUID indicates an expected call of Param36UUID.
func (mr *MockEchoContextMockRecorder) Param36UUID(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param36UUID", reflect.TypeOf((*MockEchoContext)(nil).Param36UUID), param)
}

// ParamUUID mocks base method.
func (m *MockEchoContext) ParamUUID(param string) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamUUID", param)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// ParamUUID indicates an expected call of ParamUUID.
func (mr *MockEchoContextMockRecorder) ParamUUID(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamUUID", reflect.TypeOf((*MockEchoContext)(nil).ParamUUID), param)
}

// ParamUUID36 mocks base method.
func (m *MockEchoContext) ParamUUID36(param string) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParamUUID36", param)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// ParamUUID36 indicates an expected call of ParamUUID36.
func (mr *MockEchoContextMockRecorder) ParamUUID36(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParamUUID36", reflect.TypeOf((*MockEchoContext)(nil).ParamUUID36), param)
}

// Parse36 mocks base method.
func (m *MockEchoContext) Parse36(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse36", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// Parse36 indicates an expected call of Parse36.
func (mr *MockEchoContextMockRecorder) Parse36(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse36", reflect.TypeOf((*MockEchoContext)(nil).Parse36), key, value)
}

// Parse36UUID mocks base method.
func (m *MockEchoContext) Parse36UUID(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse36UUID", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// Parse36UUID indicates an expected call of Parse36UUID.
func (mr *MockEchoContextMockRecorder) Parse36UUID(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse36UUID", reflect.TypeOf((*MockEchoContext)(nil).Parse36UUID), key, value)
}

// ParseBoolean mocks base method.
func (m *MockEchoContext) ParseBoolean(key, value string, def bool) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBoolean", key, value, def)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseBoolean indicates an expected call of ParseBoolean.
func (mr *MockEchoContextMockRecorder) ParseBoolean(key, value, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBoolean", reflect.TypeOf((*MockEchoContext)(nil).ParseBoolean), key, value, def)
}

// ParseString mocks base method.
func (m *MockEchoContext) ParseString(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseString", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseString indicates an expected call of ParseString.
func (mr *MockEchoContextMockRecorder) ParseString(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseString", reflect.TypeOf((*MockEchoContext)(nil).ParseString), key, value)
}

// ParseStringOrDefault mocks base method.
func (m *MockEchoContext) ParseStringOrDefault(key, value, def string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseStringOrDefault", key, value, def)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseStringOrDefault indicates an expected call of ParseStringOrDefault.
func (mr *MockEchoContextMockRecorder) ParseStringOrDefault(key, value, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseStringOrDefault", reflect.TypeOf((*MockEchoContext)(nil).ParseStringOrDefault), key, value, def)
}

// ParseUUID mocks base method.
func (m *MockEchoContext) ParseUUID(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUUID", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseUUID indicates an expected call of ParseUUID.
func (mr *MockEchoContextMockRecorder) ParseUUID(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUUID", reflect.TypeOf((*MockEchoContext)(nil).ParseUUID), key, value)
}

// ParseUUID36 mocks base method.
func (m *MockEchoContext) ParseUUID36(key, value string) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUUID36", key, value)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// ParseUUID36 indicates an expected call of ParseUUID36.
func (mr *MockEchoContextMockRecorder) ParseUUID36(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUUID36", reflect.TypeOf((*MockEchoContext)(nil).ParseUUID36), key, value)
}

// Query mocks base method.
func (m *MockEchoContext) Query(query, def string) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", query, def)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockEchoContextMockRecorder) Query(query, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockEchoContext)(nil).Query), query, def)
}

// QueryBoolean mocks base method.
func (m *MockEchoContext) QueryBoolean(query string, def bool) request.EchoContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBoolean", query, def)
	ret0, _ := ret[0].(request.EchoContext)
	return ret0
}

// QueryBoolean indicates an expected call of QueryBoolean.
func (mr *MockEchoContextMockRecorder) QueryBoolean(query, def interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBoolean", reflect.TypeOf((*MockEchoContext)(nil).QueryBoolean), query, def)
}

// ResponseCode mocks base method.
func (m *MockEchoContext) ResponseCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// ResponseCode indicates an expected call of ResponseCode.
func (mr *MockEchoContextMockRecorder) ResponseCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseCode", reflect.TypeOf((*MockEchoContext)(nil).ResponseCode))
}

// RollbackTransaction mocks base method.
func (m *MockEchoContext) RollbackTransaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockEchoContextMockRecorder) RollbackTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockEchoContext)(nil).RollbackTransaction))
}

// SetContext mocks base method.
func (m *MockEchoContext) SetContext(ctx context.Context) request.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContext", ctx)
	ret0, _ := ret[0].(request.Context)
	return ret0
}

// SetContext indicates an expected call of SetContext.
func (mr *MockEchoContextMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockEchoContext)(nil).SetContext), ctx)
}

// SetResponseCode mocks base method.
func (m *MockEchoContext) SetResponseCode(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseCode", code)
}

// SetResponseCode indicates an expected call of SetResponseCode.
func (mr *MockEchoContextMockRecorder) SetResponseCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseCode", reflect.TypeOf((*MockEchoContext)(nil).SetResponseCode), code)
}

// Transaction mocks base method.
func (m *MockEchoContext) Transaction() sql.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(sql.API)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockEchoContextMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockEchoContext)(nil).Transaction))
}
