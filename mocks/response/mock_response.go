// Code generated by MockGen. DO NOT EDIT.
// Source: response/response.go

// Package mock_response is a generated GoMock package.
package mock_response

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "github.com/ravielze/oculi/context"
	request "github.com/ravielze/oculi/request"
)

// MockResponder is a mock of Responder interface.
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
}

// MockResponderMockRecorder is the mock recorder for MockResponder.
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance.
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// NewJSONResponse mocks base method.
func (m *MockResponder) NewJSONResponse(ctx *context.Context, req request.ReqContext, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJSONResponse", ctx, req, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewJSONResponse indicates an expected call of NewJSONResponse.
func (mr *MockResponderMockRecorder) NewJSONResponse(ctx, req, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJSONResponse", reflect.TypeOf((*MockResponder)(nil).NewJSONResponse), ctx, req, data)
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}
