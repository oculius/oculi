// Code generated by MockGen. DO NOT EDIT.
// Source: token/token.go

// Package mock_token is a generated GoMock package.
package mock_token

import (
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	user "github.com/ravielze/oculi/common/model/dto/user"
	token "github.com/ravielze/oculi/token"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// CreateAndEncode mocks base method.
func (m *MockEncoder) CreateAndEncode(credentials user.CredentialsDTO, exp time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndEncode", credentials, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndEncode indicates an expected call of CreateAndEncode.
func (mr *MockEncoderMockRecorder) CreateAndEncode(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndEncode", reflect.TypeOf((*MockEncoder)(nil).CreateAndEncode), credentials, exp)
}

// CreateClaims mocks base method.
func (m *MockEncoder) CreateClaims(credentials user.CredentialsDTO, exp time.Duration) token.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClaims", credentials, exp)
	ret0, _ := ret[0].(token.Claims)
	return ret0
}

// CreateClaims indicates an expected call of CreateClaims.
func (mr *MockEncoderMockRecorder) CreateClaims(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClaims", reflect.TypeOf((*MockEncoder)(nil).CreateClaims), credentials, exp)
}

// Encode mocks base method.
func (m *MockEncoder) Encode(claims token.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderMockRecorder) Encode(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), claims)
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDecoder) Decode(tkn string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", tkn)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockDecoderMockRecorder) Decode(tkn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDecoder)(nil).Decode), tkn)
}

// DecodeHttpRequest mocks base method.
func (m *MockDecoder) DecodeHttpRequest(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeHttpRequest", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeHttpRequest indicates an expected call of DecodeHttpRequest.
func (mr *MockDecoderMockRecorder) DecodeHttpRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeHttpRequest", reflect.TypeOf((*MockDecoder)(nil).DecodeHttpRequest), req)
}

// MockClaims is a mock of Claims interface.
type MockClaims struct {
	ctrl     *gomock.Controller
	recorder *MockClaimsMockRecorder
}

// MockClaimsMockRecorder is the mock recorder for MockClaims.
type MockClaimsMockRecorder struct {
	mock *MockClaims
}

// NewMockClaims creates a new mock instance.
func NewMockClaims(ctrl *gomock.Controller) *MockClaims {
	mock := &MockClaims{ctrl: ctrl}
	mock.recorder = &MockClaimsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaims) EXPECT() *MockClaimsMockRecorder {
	return m.recorder
}

// Credentials mocks base method.
func (m *MockClaims) Credentials() user.CredentialsDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credentials")
	ret0, _ := ret[0].(user.CredentialsDTO)
	return ret0
}

// Credentials indicates an expected call of Credentials.
func (mr *MockClaimsMockRecorder) Credentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credentials", reflect.TypeOf((*MockClaims)(nil).Credentials))
}

// Valid mocks base method.
func (m *MockClaims) Valid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(error)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockClaimsMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockClaims)(nil).Valid))
}

// MockTokenizer is a mock of Tokenizer interface.
type MockTokenizer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerMockRecorder
}

// MockTokenizerMockRecorder is the mock recorder for MockTokenizer.
type MockTokenizerMockRecorder struct {
	mock *MockTokenizer
}

// NewMockTokenizer creates a new mock instance.
func NewMockTokenizer(ctrl *gomock.Controller) *MockTokenizer {
	mock := &MockTokenizer{ctrl: ctrl}
	mock.recorder = &MockTokenizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizer) EXPECT() *MockTokenizerMockRecorder {
	return m.recorder
}

// CreateAndEncode mocks base method.
func (m *MockTokenizer) CreateAndEncode(credentials user.CredentialsDTO, exp time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndEncode", credentials, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndEncode indicates an expected call of CreateAndEncode.
func (mr *MockTokenizerMockRecorder) CreateAndEncode(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndEncode", reflect.TypeOf((*MockTokenizer)(nil).CreateAndEncode), credentials, exp)
}

// CreateClaims mocks base method.
func (m *MockTokenizer) CreateClaims(credentials user.CredentialsDTO, exp time.Duration) token.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClaims", credentials, exp)
	ret0, _ := ret[0].(token.Claims)
	return ret0
}

// CreateClaims indicates an expected call of CreateClaims.
func (mr *MockTokenizerMockRecorder) CreateClaims(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClaims", reflect.TypeOf((*MockTokenizer)(nil).CreateClaims), credentials, exp)
}

// Decode mocks base method.
func (m *MockTokenizer) Decode(tkn string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", tkn)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockTokenizerMockRecorder) Decode(tkn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockTokenizer)(nil).Decode), tkn)
}

// DecodeHttpRequest mocks base method.
func (m *MockTokenizer) DecodeHttpRequest(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeHttpRequest", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeHttpRequest indicates an expected call of DecodeHttpRequest.
func (mr *MockTokenizerMockRecorder) DecodeHttpRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeHttpRequest", reflect.TypeOf((*MockTokenizer)(nil).DecodeHttpRequest), req)
}

// Encode mocks base method.
func (m *MockTokenizer) Encode(claims token.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockTokenizerMockRecorder) Encode(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockTokenizer)(nil).Encode), claims)
}
