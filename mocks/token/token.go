// Code generated by MockGen. DO NOT EDIT.
// Source: token/token.go

// Package mock_token is a generated GoMock package.
package mock_token

import (
	http "net/http"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	user "github.com/ravielze/oculi/common/model/dto/user"
	token "github.com/ravielze/oculi/token"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// CreateAccessAndEncode mocks base method.
func (m *MockEncoder) CreateAccessAndEncode(credentials user.CredentialsDTO, exp time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessAndEncode", credentials, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessAndEncode indicates an expected call of CreateAccessAndEncode.
func (mr *MockEncoderMockRecorder) CreateAccessAndEncode(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessAndEncode", reflect.TypeOf((*MockEncoder)(nil).CreateAccessAndEncode), credentials, exp)
}

// CreateAccessClaims mocks base method.
func (m *MockEncoder) CreateAccessClaims(credentials user.CredentialsDTO, exp time.Duration) token.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessClaims", credentials, exp)
	ret0, _ := ret[0].(token.Claims)
	return ret0
}

// CreateAccessClaims indicates an expected call of CreateAccessClaims.
func (mr *MockEncoderMockRecorder) CreateAccessClaims(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessClaims", reflect.TypeOf((*MockEncoder)(nil).CreateAccessClaims), credentials, exp)
}

// CreateRefreshAndEncode mocks base method.
func (m *MockEncoder) CreateRefreshAndEncode(userId uint64, exp time.Duration) (string, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshAndEncode", userId, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefreshAndEncode indicates an expected call of CreateRefreshAndEncode.
func (mr *MockEncoderMockRecorder) CreateRefreshAndEncode(userId, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshAndEncode", reflect.TypeOf((*MockEncoder)(nil).CreateRefreshAndEncode), userId, exp)
}

// CreateRefreshClaims mocks base method.
func (m *MockEncoder) CreateRefreshClaims(userId uint64, exp time.Duration) (token.Claims, uuid.UUID) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshClaims", userId, exp)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(uuid.UUID)
	return ret0, ret1
}

// CreateRefreshClaims indicates an expected call of CreateRefreshClaims.
func (mr *MockEncoderMockRecorder) CreateRefreshClaims(userId, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshClaims", reflect.TypeOf((*MockEncoder)(nil).CreateRefreshClaims), userId, exp)
}

// Encode mocks base method.
func (m *MockEncoder) Encode(claims token.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderMockRecorder) Encode(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), claims)
}

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// DecodeAccess mocks base method.
func (m *MockDecoder) DecodeAccess(tokenString string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccess", tokenString)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccess indicates an expected call of DecodeAccess.
func (mr *MockDecoderMockRecorder) DecodeAccess(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccess", reflect.TypeOf((*MockDecoder)(nil).DecodeAccess), tokenString)
}

// DecodeAccessCookie mocks base method.
func (m *MockDecoder) DecodeAccessCookie(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessCookie", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessCookie indicates an expected call of DecodeAccessCookie.
func (mr *MockDecoderMockRecorder) DecodeAccessCookie(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessCookie", reflect.TypeOf((*MockDecoder)(nil).DecodeAccessCookie), req)
}

// DecodeAccessHeader mocks base method.
func (m *MockDecoder) DecodeAccessHeader(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessHeader", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessHeader indicates an expected call of DecodeAccessHeader.
func (mr *MockDecoderMockRecorder) DecodeAccessHeader(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessHeader", reflect.TypeOf((*MockDecoder)(nil).DecodeAccessHeader), req)
}

// DecodeRefresh mocks base method.
func (m *MockDecoder) DecodeRefresh(tokenString string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefresh", tokenString)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefresh indicates an expected call of DecodeRefresh.
func (mr *MockDecoderMockRecorder) DecodeRefresh(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefresh", reflect.TypeOf((*MockDecoder)(nil).DecodeRefresh), tokenString)
}

// DecodeRefreshCookie mocks base method.
func (m *MockDecoder) DecodeRefreshCookie(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefreshCookie", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefreshCookie indicates an expected call of DecodeRefreshCookie.
func (mr *MockDecoderMockRecorder) DecodeRefreshCookie(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefreshCookie", reflect.TypeOf((*MockDecoder)(nil).DecodeRefreshCookie), req)
}

// MockAccessEncoder is a mock of AccessEncoder interface.
type MockAccessEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockAccessEncoderMockRecorder
}

// MockAccessEncoderMockRecorder is the mock recorder for MockAccessEncoder.
type MockAccessEncoderMockRecorder struct {
	mock *MockAccessEncoder
}

// NewMockAccessEncoder creates a new mock instance.
func NewMockAccessEncoder(ctrl *gomock.Controller) *MockAccessEncoder {
	mock := &MockAccessEncoder{ctrl: ctrl}
	mock.recorder = &MockAccessEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessEncoder) EXPECT() *MockAccessEncoderMockRecorder {
	return m.recorder
}

// CreateAccessAndEncode mocks base method.
func (m *MockAccessEncoder) CreateAccessAndEncode(credentials user.CredentialsDTO, exp time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessAndEncode", credentials, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessAndEncode indicates an expected call of CreateAccessAndEncode.
func (mr *MockAccessEncoderMockRecorder) CreateAccessAndEncode(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessAndEncode", reflect.TypeOf((*MockAccessEncoder)(nil).CreateAccessAndEncode), credentials, exp)
}

// CreateAccessClaims mocks base method.
func (m *MockAccessEncoder) CreateAccessClaims(credentials user.CredentialsDTO, exp time.Duration) token.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessClaims", credentials, exp)
	ret0, _ := ret[0].(token.Claims)
	return ret0
}

// CreateAccessClaims indicates an expected call of CreateAccessClaims.
func (mr *MockAccessEncoderMockRecorder) CreateAccessClaims(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessClaims", reflect.TypeOf((*MockAccessEncoder)(nil).CreateAccessClaims), credentials, exp)
}

// MockRefreshEncoder is a mock of RefreshEncoder interface.
type MockRefreshEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshEncoderMockRecorder
}

// MockRefreshEncoderMockRecorder is the mock recorder for MockRefreshEncoder.
type MockRefreshEncoderMockRecorder struct {
	mock *MockRefreshEncoder
}

// NewMockRefreshEncoder creates a new mock instance.
func NewMockRefreshEncoder(ctrl *gomock.Controller) *MockRefreshEncoder {
	mock := &MockRefreshEncoder{ctrl: ctrl}
	mock.recorder = &MockRefreshEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshEncoder) EXPECT() *MockRefreshEncoderMockRecorder {
	return m.recorder
}

// CreateRefreshAndEncode mocks base method.
func (m *MockRefreshEncoder) CreateRefreshAndEncode(userId uint64, exp time.Duration) (string, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshAndEncode", userId, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefreshAndEncode indicates an expected call of CreateRefreshAndEncode.
func (mr *MockRefreshEncoderMockRecorder) CreateRefreshAndEncode(userId, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshAndEncode", reflect.TypeOf((*MockRefreshEncoder)(nil).CreateRefreshAndEncode), userId, exp)
}

// CreateRefreshClaims mocks base method.
func (m *MockRefreshEncoder) CreateRefreshClaims(userId uint64, exp time.Duration) (token.Claims, uuid.UUID) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshClaims", userId, exp)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(uuid.UUID)
	return ret0, ret1
}

// CreateRefreshClaims indicates an expected call of CreateRefreshClaims.
func (mr *MockRefreshEncoderMockRecorder) CreateRefreshClaims(userId, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshClaims", reflect.TypeOf((*MockRefreshEncoder)(nil).CreateRefreshClaims), userId, exp)
}

// MockAccessDecoder is a mock of AccessDecoder interface.
type MockAccessDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockAccessDecoderMockRecorder
}

// MockAccessDecoderMockRecorder is the mock recorder for MockAccessDecoder.
type MockAccessDecoderMockRecorder struct {
	mock *MockAccessDecoder
}

// NewMockAccessDecoder creates a new mock instance.
func NewMockAccessDecoder(ctrl *gomock.Controller) *MockAccessDecoder {
	mock := &MockAccessDecoder{ctrl: ctrl}
	mock.recorder = &MockAccessDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessDecoder) EXPECT() *MockAccessDecoderMockRecorder {
	return m.recorder
}

// DecodeAccess mocks base method.
func (m *MockAccessDecoder) DecodeAccess(tokenString string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccess", tokenString)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccess indicates an expected call of DecodeAccess.
func (mr *MockAccessDecoderMockRecorder) DecodeAccess(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccess", reflect.TypeOf((*MockAccessDecoder)(nil).DecodeAccess), tokenString)
}

// DecodeAccessCookie mocks base method.
func (m *MockAccessDecoder) DecodeAccessCookie(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessCookie", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessCookie indicates an expected call of DecodeAccessCookie.
func (mr *MockAccessDecoderMockRecorder) DecodeAccessCookie(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessCookie", reflect.TypeOf((*MockAccessDecoder)(nil).DecodeAccessCookie), req)
}

// DecodeAccessHeader mocks base method.
func (m *MockAccessDecoder) DecodeAccessHeader(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessHeader", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessHeader indicates an expected call of DecodeAccessHeader.
func (mr *MockAccessDecoderMockRecorder) DecodeAccessHeader(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessHeader", reflect.TypeOf((*MockAccessDecoder)(nil).DecodeAccessHeader), req)
}

// MockRefreshDecoder is a mock of RefreshDecoder interface.
type MockRefreshDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshDecoderMockRecorder
}

// MockRefreshDecoderMockRecorder is the mock recorder for MockRefreshDecoder.
type MockRefreshDecoderMockRecorder struct {
	mock *MockRefreshDecoder
}

// NewMockRefreshDecoder creates a new mock instance.
func NewMockRefreshDecoder(ctrl *gomock.Controller) *MockRefreshDecoder {
	mock := &MockRefreshDecoder{ctrl: ctrl}
	mock.recorder = &MockRefreshDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshDecoder) EXPECT() *MockRefreshDecoderMockRecorder {
	return m.recorder
}

// DecodeRefresh mocks base method.
func (m *MockRefreshDecoder) DecodeRefresh(tokenString string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefresh", tokenString)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefresh indicates an expected call of DecodeRefresh.
func (mr *MockRefreshDecoderMockRecorder) DecodeRefresh(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefresh", reflect.TypeOf((*MockRefreshDecoder)(nil).DecodeRefresh), tokenString)
}

// DecodeRefreshCookie mocks base method.
func (m *MockRefreshDecoder) DecodeRefreshCookie(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefreshCookie", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefreshCookie indicates an expected call of DecodeRefreshCookie.
func (mr *MockRefreshDecoderMockRecorder) DecodeRefreshCookie(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefreshCookie", reflect.TypeOf((*MockRefreshDecoder)(nil).DecodeRefreshCookie), req)
}

// MockClaims is a mock of Claims interface.
type MockClaims struct {
	ctrl     *gomock.Controller
	recorder *MockClaimsMockRecorder
}

// MockClaimsMockRecorder is the mock recorder for MockClaims.
type MockClaimsMockRecorder struct {
	mock *MockClaims
}

// NewMockClaims creates a new mock instance.
func NewMockClaims(ctrl *gomock.Controller) *MockClaims {
	mock := &MockClaims{ctrl: ctrl}
	mock.recorder = &MockClaimsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaims) EXPECT() *MockClaimsMockRecorder {
	return m.recorder
}

// Credentials mocks base method.
func (m *MockClaims) Credentials() user.CredentialsDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credentials")
	ret0, _ := ret[0].(user.CredentialsDTO)
	return ret0
}

// Credentials indicates an expected call of Credentials.
func (mr *MockClaimsMockRecorder) Credentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credentials", reflect.TypeOf((*MockClaims)(nil).Credentials))
}

// Valid mocks base method.
func (m *MockClaims) Valid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(error)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockClaimsMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockClaims)(nil).Valid))
}

// MockTokenizer is a mock of Tokenizer interface.
type MockTokenizer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerMockRecorder
}

// MockTokenizerMockRecorder is the mock recorder for MockTokenizer.
type MockTokenizerMockRecorder struct {
	mock *MockTokenizer
}

// NewMockTokenizer creates a new mock instance.
func NewMockTokenizer(ctrl *gomock.Controller) *MockTokenizer {
	mock := &MockTokenizer{ctrl: ctrl}
	mock.recorder = &MockTokenizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizer) EXPECT() *MockTokenizerMockRecorder {
	return m.recorder
}

// CreateAccessAndEncode mocks base method.
func (m *MockTokenizer) CreateAccessAndEncode(credentials user.CredentialsDTO, exp time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessAndEncode", credentials, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessAndEncode indicates an expected call of CreateAccessAndEncode.
func (mr *MockTokenizerMockRecorder) CreateAccessAndEncode(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessAndEncode", reflect.TypeOf((*MockTokenizer)(nil).CreateAccessAndEncode), credentials, exp)
}

// CreateAccessClaims mocks base method.
func (m *MockTokenizer) CreateAccessClaims(credentials user.CredentialsDTO, exp time.Duration) token.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessClaims", credentials, exp)
	ret0, _ := ret[0].(token.Claims)
	return ret0
}

// CreateAccessClaims indicates an expected call of CreateAccessClaims.
func (mr *MockTokenizerMockRecorder) CreateAccessClaims(credentials, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessClaims", reflect.TypeOf((*MockTokenizer)(nil).CreateAccessClaims), credentials, exp)
}

// CreateRefreshAndEncode mocks base method.
func (m *MockTokenizer) CreateRefreshAndEncode(userId uint64, exp time.Duration) (string, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshAndEncode", userId, exp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefreshAndEncode indicates an expected call of CreateRefreshAndEncode.
func (mr *MockTokenizerMockRecorder) CreateRefreshAndEncode(userId, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshAndEncode", reflect.TypeOf((*MockTokenizer)(nil).CreateRefreshAndEncode), userId, exp)
}

// CreateRefreshClaims mocks base method.
func (m *MockTokenizer) CreateRefreshClaims(userId uint64, exp time.Duration) (token.Claims, uuid.UUID) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshClaims", userId, exp)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(uuid.UUID)
	return ret0, ret1
}

// CreateRefreshClaims indicates an expected call of CreateRefreshClaims.
func (mr *MockTokenizerMockRecorder) CreateRefreshClaims(userId, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshClaims", reflect.TypeOf((*MockTokenizer)(nil).CreateRefreshClaims), userId, exp)
}

// DecodeAccess mocks base method.
func (m *MockTokenizer) DecodeAccess(tokenString string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccess", tokenString)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccess indicates an expected call of DecodeAccess.
func (mr *MockTokenizerMockRecorder) DecodeAccess(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccess", reflect.TypeOf((*MockTokenizer)(nil).DecodeAccess), tokenString)
}

// DecodeAccessCookie mocks base method.
func (m *MockTokenizer) DecodeAccessCookie(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessCookie", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessCookie indicates an expected call of DecodeAccessCookie.
func (mr *MockTokenizerMockRecorder) DecodeAccessCookie(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessCookie", reflect.TypeOf((*MockTokenizer)(nil).DecodeAccessCookie), req)
}

// DecodeAccessHeader mocks base method.
func (m *MockTokenizer) DecodeAccessHeader(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessHeader", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessHeader indicates an expected call of DecodeAccessHeader.
func (mr *MockTokenizerMockRecorder) DecodeAccessHeader(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessHeader", reflect.TypeOf((*MockTokenizer)(nil).DecodeAccessHeader), req)
}

// DecodeRefresh mocks base method.
func (m *MockTokenizer) DecodeRefresh(tokenString string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefresh", tokenString)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefresh indicates an expected call of DecodeRefresh.
func (mr *MockTokenizerMockRecorder) DecodeRefresh(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefresh", reflect.TypeOf((*MockTokenizer)(nil).DecodeRefresh), tokenString)
}

// DecodeRefreshCookie mocks base method.
func (m *MockTokenizer) DecodeRefreshCookie(req *http.Request) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeRefreshCookie", req)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeRefreshCookie indicates an expected call of DecodeRefreshCookie.
func (mr *MockTokenizerMockRecorder) DecodeRefreshCookie(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeRefreshCookie", reflect.TypeOf((*MockTokenizer)(nil).DecodeRefreshCookie), req)
}

// Encode mocks base method.
func (m *MockTokenizer) Encode(claims token.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockTokenizerMockRecorder) Encode(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockTokenizer)(nil).Encode), claims)
}
