// Code generated by MockGen. DO NOT EDIT.
// Source: validator/validator.go

// Package mock_validator is a generated GoMock package.
package mock_validator

import (
	reflect "reflect"

	ut "github.com/go-playground/universal-translator"
	gomock "github.com/golang/mock/gomock"
	validator "github.com/ravielze/oculi/validator"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// AddTranslation mocks base method.
func (m *MockValidator) AddTranslation(tag, format string, extraParams ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tag, format}
	for _, a := range extraParams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTranslation", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTranslation indicates an expected call of AddTranslation.
func (mr *MockValidatorMockRecorder) AddTranslation(tag, format interface{}, extraParams ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tag, format}, extraParams...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTranslation", reflect.TypeOf((*MockValidator)(nil).AddTranslation), varargs...)
}

// Register mocks base method.
func (m *MockValidator) Register(tag string, cv interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", tag, cv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockValidatorMockRecorder) Register(tag, cv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockValidator)(nil).Register), tag, cv)
}

// RegisterCustomTypeFunc mocks base method.
func (m *MockValidator) RegisterCustomTypeFunc(fn validator.CustomTypeFunc, types ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{fn}
	for _, a := range types {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterCustomTypeFunc", varargs...)
}

// RegisterCustomTypeFunc indicates an expected call of RegisterCustomTypeFunc.
func (mr *MockValidatorMockRecorder) RegisterCustomTypeFunc(fn interface{}, types ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fn}, types...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCustomTypeFunc", reflect.TypeOf((*MockValidator)(nil).RegisterCustomTypeFunc), varargs...)
}

// RegisterStructValidation mocks base method.
func (m *MockValidator) RegisterStructValidation(fn interface{}, types ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{fn}
	for _, a := range types {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterStructValidation", varargs...)
}

// RegisterStructValidation indicates an expected call of RegisterStructValidation.
func (mr *MockValidatorMockRecorder) RegisterStructValidation(fn interface{}, types ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fn}, types...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStructValidation", reflect.TypeOf((*MockValidator)(nil).RegisterStructValidation), varargs...)
}

// RegisterValidation mocks base method.
func (m *MockValidator) RegisterValidation(tag string, fn interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterValidation", tag, fn)
}

// RegisterValidation indicates an expected call of RegisterValidation.
func (mr *MockValidatorMockRecorder) RegisterValidation(tag, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterValidation", reflect.TypeOf((*MockValidator)(nil).RegisterValidation), tag, fn)
}

// Translator mocks base method.
func (m *MockValidator) Translator() *ut.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translator")
	ret0, _ := ret[0].(*ut.Translator)
	return ret0
}

// Translator indicates an expected call of Translator.
func (mr *MockValidatorMockRecorder) Translator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translator", reflect.TypeOf((*MockValidator)(nil).Translator))
}

// Validate mocks base method.
func (m *MockValidator) Validate(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), obj)
}

// ValidateVar mocks base method.
func (m *MockValidator) ValidateVar(obj interface{}, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVar", obj, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVar indicates an expected call of ValidateVar.
func (mr *MockValidatorMockRecorder) ValidateVar(obj, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVar", reflect.TypeOf((*MockValidator)(nil).ValidateVar), obj, tag)
}

// MockRegisterable is a mock of Registerable interface.
type MockRegisterable struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterableMockRecorder
}

// MockRegisterableMockRecorder is the mock recorder for MockRegisterable.
type MockRegisterableMockRecorder struct {
	mock *MockRegisterable
}

// NewMockRegisterable creates a new mock instance.
func NewMockRegisterable(ctrl *gomock.Controller) *MockRegisterable {
	mock := &MockRegisterable{ctrl: ctrl}
	mock.recorder = &MockRegisterableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterable) EXPECT() *MockRegisterableMockRecorder {
	return m.recorder
}

// ExtraParamsOnFormat mocks base method.
func (m *MockRegisterable) ExtraParamsOnFormat() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtraParamsOnFormat")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExtraParamsOnFormat indicates an expected call of ExtraParamsOnFormat.
func (mr *MockRegisterableMockRecorder) ExtraParamsOnFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtraParamsOnFormat", reflect.TypeOf((*MockRegisterable)(nil).ExtraParamsOnFormat))
}

// FormatOnError mocks base method.
func (m *MockRegisterable) FormatOnError() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatOnError")
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatOnError indicates an expected call of FormatOnError.
func (mr *MockRegisterableMockRecorder) FormatOnError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatOnError", reflect.TypeOf((*MockRegisterable)(nil).FormatOnError))
}

// Tag mocks base method.
func (m *MockRegisterable) Tag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockRegisterableMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRegisterable)(nil).Tag))
}
